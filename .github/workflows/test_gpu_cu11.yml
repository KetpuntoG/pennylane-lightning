name: Testing::Linux::x86_64 (Lightning-GPU)
on:
  pull_request:
  push:
    branches:
      - master

env:
  CI_CUDA_ARCH: 86
  COVERAGE_FLAGS: "--cov=pennylane_lightning --cov-report=term-missing --cov-report=xml:./coverage.xml --no-flaky-report -p no:warnings --tb=native"
  GCC_VERSION: 11
  TF_VERSION: 2.10.0
  TORCH_VERSION: 1.11.0+cpu

concurrency:
  group: tests_gpu-${{ github.ref }}
  cancel-in-progress: true

jobs:
  builddeps:
    runs-on:
      - self-hosted
      - ubuntu-22.04
      - gpu

    strategy:
      max-parallel: 1
      matrix:
        os: [ubuntu-22.04]
        exec_model: ["CUDA"]

    steps:
      - name: Validate GPU version and installed compiler
        run: |
          source /etc/profile.d/modules.sh
          module use /opt/modules
          module load cuda/11.8
          echo "${PATH}" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          nvcc --version
          nvidia-smi

  cpptestswithLGPU:
    needs: [builddeps]
    strategy:
      matrix:
        os: [ubuntu-22.04]
        pl_backend: ["lightning_gpu"]
        exec_model: ["CUDA"]

    name: C++ tests (Lightning-GPU)
    runs-on: ${{ matrix.os }}

    steps:
      - name: Validate GPU version and installed compiler
        run: |
          source /etc/profile.d/modules.sh
          module use /opt/modules
          module load cuda/11.8
          echo "${PATH}" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          nvcc --version
          nvidia-smi

      - name: Checkout PennyLane-Lightning
        uses: actions/checkout@v3
        with:
          path: main
          fetch-depth: 2

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.9'

      - name: Setup Python virtual environment
        id: setup_venv
        env:
          VENV_NAME: ${{ github.workspace }}/venv_${{ steps.setup_python.outputs.python-version }}_${{ github.sha }}
        run: |
          # Clear any pre-existing venvs
          rm -rf venv_*

          # Create new venv for this workflow_run
          python --version
          python -m venv ${{ env.VENV_NAME }}

          # Add the venv to PATH for subsequent steps
          echo ${{ env.VENV_NAME }}/bin >> $GITHUB_PATH

          # Adding venv name as an output for subsequent steps to reference if needed
          echo "venv_name=${{ env.VENV_NAME }}" >> $GITHUB_OUTPUT

      - name: Display Python-Path
        id: python_path
        run: |
          py_path=$(which python)
          echo "Python Interpreter Path => $py_path"
          echo "python=$py_path" >> $GITHUB_OUTPUT
          
          pip_path=$(which python)
          echo "PIP Path => $pip_path"
          echo "pip=$pip_path" >> $GITHUB_OUTPUT

      - name: Install required packages
        run: |
          python -m pip install ninja cmake custatevec-cu11 
      
      - name: Install Latest PennyLane
        if: inputs.pennylane-version == 'latest'
        run: python -m pip install git+https://github.com/PennyLaneAI/pennylane.git@master

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get -y -q install cmake gcc-$GCC_VERSION  g++-$GCC_VERSION  ninja-build gcovr lcov

      - name: Build and run unit tests
        env: 
          CUQUANTUM_SDK: $(python -c "import site; print( f'{site.getsitepackages()[0]}/cuquantum/lib')")
        run: |
          cd main
          cmake . -BBuild -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_TESTS=ON \
            -DENABLE_PYTHON=OFF \
            -DPL_BACKEND=${{ matrix.pl_backend }} \
            -DCMAKE_CXX_COMPILER=$(which g++-$GCC_VERSION) \
            -DENABLE_COVERAGE=ON
          cmake --build ./Build
          cd ./Build
          mkdir -p ./tests/results_${{ github.job }}_${{ matrix.pl_backend }}
          for file in *runner ; do ./$file --order lex --reporter junit --out ./tests/results_${{ github.job }}_${{ matrix.pl_backend }}/report_$file.xml; done;
          lcov --directory . -b ../pennylane_lightning/core/src --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          mv coverage.info coverage-${{ github.job }}-${{ matrix.pl_backend }}.info
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ubuntu-tests-reports-${{ github.job }}_${{ matrix.pl_backend }}
          path: ./main/Build/tests/results_${{ github.job }}_${{ matrix.pl_backend }}
          if-no-files-found: error

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp
          path: ./main/Build/coverage-${{ github.job }}-${{ matrix.pl_backend }}.info
          if-no-files-found: error